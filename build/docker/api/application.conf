vinyldns {
  version = "unknown"
  version = ${?VINYLDNS_VERSION}

  queue {
    class-name = "vinyldns.mysql.queue.MySqlMessageQueueProvider"
    polling-interval = 250.millis
    messages-per-poll = 10

    settings = {
      name = "vinyldns"
      name = ${?JDBC_DB_NAME}
      driver = "org.mariadb.jdbc.Driver"
      driver = ${?JDBC_DRIVER}
      migration-url = "jdbc:mariadb://vinyldns-integration:19002/?user=root&password=pass"
      migration-url = ${?JDBC_MIGRATION_URL}
      url = "jdbc:mariadb://vinyldns-integration:19002/vinyldns?user=root&password=pass"
      url = ${?JDBC_URL}
      user = "root"
      user = ${?JDBC_USER}
      password = "pass"
      password = ${?JDBC_PASSWORD}

      # see https://github.com/brettwooldridge/HikariCP
      connection-timeout-millis = 1000
      idle-timeout = 10000
      max-lifetime = 30000
      maximum-pool-size = 5
      minimum-idle = 0

      my-sql-properties = {
        cachePrepStmts=true
        prepStmtCacheSize=250
        prepStmtCacheSqlLimit=2048
        rewriteBatchedStatements=true
      }
    }
  }

  rest {
    host = "0.0.0.0"
    port = 9000
  }

  sync-delay = 10000

  crypto {
    type = "vinyldns.core.crypto.NoOpCrypto"
  }

  data-stores = ["mysql"]

  mysql {
    settings {
      # JDBC Settings, these are all values in scalikejdbc-config, not our own
      # these must be overridden to use MYSQL for production use
      # assumes a docker or mysql instance running locally
      name = "vinyldns"
      name = ${?JDBC_DB_NAME}
      driver = "org.mariadb.jdbc.Driver"
      driver = ${?JDBC_DRIVER}
      migration-url = "jdbc:mariadb://vinyldns-integration:19002/?user=root&password=pass"
      migration-url = ${?JDBC_MIGRATION_URL}
      url = "jdbc:mariadb://vinyldns-integration:19002/vinyldns?user=root&password=pass"
      url = ${?JDBC_URL}
      user = "root"
      user = ${?JDBC_USER}
      password = "pass"
      password = ${?JDBC_PASSWORD}
      # see https://github.com/brettwooldridge/HikariCP
      connection-timeout-millis = 1000
      idle-timeout = 10000
      max-lifetime = 600000
      maximum-pool-size = 20
      minimum-idle = 20
      register-mbeans = true
    }
    # Repositories that use this data store are listed here
    repositories {
      zone {
      }
      batch-change {
      }
      user {
      }
      record-set {
      }
      zone-change {
      }
      record-change {
      }
      group {
      }
      group-change {
      }
      membership {
      }
    }
  }

  defaultZoneConnection {
    name = "vinyldns."
    keyName = "vinyldns."
    keyName = ${?DEFAULT_DNS_KEY_NAME}
    key = "nzisn+4G2ldMn0q1CV3vsg=="
    key = ${?DEFAULT_DNS_KEY_SECRET}
    primaryServer = "vinyldns-integration:19001"
    primaryServer = ${?DEFAULT_DNS_ADDRESS}
  }

  defaultTransferConnection {
    name = "vinyldns."
    keyName = "vinyldns."
    keyName = ${?DEFAULT_DNS_KEY_NAME}
    key = "nzisn+4G2ldMn0q1CV3vsg=="
    key = ${?DEFAULT_DNS_KEY_SECRET}
    primaryServer = "vinyldns-integration:19001"
    primaryServer = ${?DEFAULT_DNS_ADDRESS}
  }

  backends = [
    {
      id = "func-test-backend"
      zone-connection {
        name = "vinyldns."
        key-name = "vinyldns."
        key-name = ${?DEFAULT_DNS_KEY_NAME}
        key = "nzisn+4G2ldMn0q1CV3vsg=="
        key = ${?DEFAULT_DNS_KEY_SECRET}
        primary-server = "vinyldns-integration:19001"
        primary-server = ${?DEFAULT_DNS_ADDRESS}
      }
      transfer-connection {
        name = "vinyldns."
        key-name = "vinyldns."
        key-name = ${?DEFAULT_DNS_KEY_NAME}
        key = "nzisn+4G2ldMn0q1CV3vsg=="
        key = ${?DEFAULT_DNS_KEY_SECRET}
        primary-server = "vinyldns-integration:19001"
        primary-server = ${?DEFAULT_DNS_ADDRESS}
      }
    }
  ]

  batch-change-limit = 1000

  # FQDNs / IPs that cannot be modified via VinylDNS
  # regex-list used for all record types except PTR
  # ip-list used exclusively for PTR records
  high-value-domains = {
    regex-list = [
      "high-value-domain.*" # for testing
    ]
    ip-list = [
      "192.0.2.252",
      "192.0.2.253",
      "fd69:27cc:fe91:0:0:0:0:ffff",
      "fd69:27cc:fe91:0:0:0:ffff:0"
    ]
  }

  # types of unowned records that users can access in shared zones
  shared-approved-types = ["A", "AAAA", "CNAME", "PTR", "TXT"]

  manual-batch-review-enabled = true
}

akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s

  actor {
    provider = "akka.actor.LocalActorRefProvider"
  }
}

akka.http {
  server {
    # The time period within which the TCP binding process must be completed.
    # Set to `infinite` to disable.
    bind-timeout = 5s

    # Show verbose error messages back to the client
    verbose-error-messages = on
  }

  parsing {
    # Spray doesn't like the AWS4 headers
    illegal-header-warnings = on
  }
}
